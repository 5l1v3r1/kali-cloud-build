#!/bin/bash -e
#            ^ Stop execution if any command fails


# Rember various paths
scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
originaldir=$(/bin/pwd)

# Custom die function, output to stderr instead of stdout
function die {
	echo -e $@ >&2
	exit 1
}

# Wait for the execution of $cmd not to return an empty string
function dotdot {
	status=$1
	cmd=$2
	sleep=5
	[ ! -z "$3" ] && sleep=$3
	while [ -z "$status" ]; do
		echo -n '.'
		sleep $sleep
		status=`eval $cmd`
	done
	echo
}

# Add some standard packages we are going to need
packages="grub openssh-server curl less"

while [ $# -gt 0 ]; do
	case $1 in
		--arch)        arch=$2;                             shift 2 ;;
		--description) description=$2;                      shift 2 ;;
		--user)        AWS_USER_ID=$2;                      shift 2 ;;
		--access-key)  AWS_ACCESS_KEY_ID=$2;                shift 2 ;;
		--secret-key)  AWS_SECRET_ACCESS_KEY=$2;            shift 2 ;;
		--private-key) EC2_PRIVATE_KEY=$2;                  shift 2 ;;
		--cert)        EC2_CERT=$2;                         shift 2 ;;
		--timezone)    timezone=$2;                         shift 2 ;;
		--locale)      locale=$2;                           shift 2 ;;
		--charmap)     charmap=$2;                          shift 2 ;;
		--no-run-user-data) no_run_user_data=1;             shift   ;;
		--package)     packages="$packages $2";             shift 2 ;;
		--imagedir)    imagedir=$2;                         shift 2 ;;
		--script)      scripts=("${scripts[@]}" "$2");      shift 2 ;;
		--debug)       set -x;                              shift   ;;
		*)             die "$0: Unrecognized option: $1";           ;;
	esac
done

# Hardcoded. This script would explode if we would have to take care of other distributions
distribution="debian"
codename="squeeze"

# Required and default parameters
true ${AWS_USER_ID:?} ${AWS_ACCESS_KEY_ID:?} ${AWS_SECRET_ACCESS_KEY:?} \
		${EC2_CERT:?} ${EC2_PRIVATE_KEY:?} \
		${locale:=en_US} ${charmap:=UTF-8} ${timezone:=UTC} \
		${imagedir:=/mnt/image} ${arch:=amd64}

# Translate the architecture for the AMI
case $arch in
	amd64) bundlearch="x86_64" ;;
	i386)  bundlearch="i386"   ;;
	*)     die "$0: Unrecognized architecture: $arch"
esac

# Quit if we can't find the certificate
[ ! -f "$EC2_CERT" ] && die "$0: AWS certificate file not found: $EC2_CERT"
export EC2_CERT

# ... or the private for.
[ ! -f "$EC2_PRIVATE_KEY" ] && die "$0: AWS private key file not found: $EC2_PRIVATE_KEY"
export EC2_PRIVATE_KEY

# Add some packages to the list
packages="$packages udev psmisc lsb-release"

# Output some info to the user about the AMI we are about to build
echo "Building AMI for $distribution $codename"
echo "locale:         $locale"
echo "charmap:        $charmap"
echo "timezone:       $timezone"
echo "architecture:   $arch"
echo "packages:       $packages"

# Source all tasks in the right order
for task in `find $scriptdir/tasks -type f | sort`; do
	source $task
done
