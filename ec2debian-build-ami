#!/bin/bash -e
#            ^ Stop execution if any command fails


# Rember various paths
scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
originaldir=$(/bin/pwd)

source $scriptdir/utils

# Add some standard packages we are going to need
packages=('grub' 'locales' 'openssh-server' 'curl')
packages+=('less' 'udev' 'psmisc' 'lsb-release' 'dhcpcd')
exclude_packages=('isc-dhcp-client' 'isc-dhcp-common')

while [ $# -gt 0 ]; do
	case $1 in
		--arch)        arch=$2;                             shift 2 ;;
		--description) description=$2;                      shift 2 ;;
		--user)        AWS_USER_ID=$2;                      shift 2 ;;
		--access-key)  AWS_ACCESS_KEY_ID=$2;                shift 2 ;;
		--secret-key)  AWS_SECRET_ACCESS_KEY=$2;            shift 2 ;;
		--private-key) EC2_PRIVATE_KEY=$2;                  shift 2 ;;
		--cert)        EC2_CERT=$2;                         shift 2 ;;
		--timezone)    timezone=$2;                         shift 2 ;;
		--locale)      locale=$2;                           shift 2 ;;
		--charmap)     charmap=$2;                          shift 2 ;;
		--no-run-user-data) no_run_user_data=1;             shift   ;;
		--package)     packages+=("$2");                    shift 2 ;;
		--imagedir)    imagedir=$2;                         shift 2 ;;
		--script)      scripts=("${scripts[@]}" "$2");      shift 2 ;;
		--debug)       set -x;                              shift   ;;
		*)             die "Unrecognized option: $1";               ;;
	esac
done

# Hardcoded. This script would explode if we would have to take care of other distributions
distribution="debian"
codename="squeeze"

# Required and default parameters
true ${AWS_USER_ID:?} ${AWS_ACCESS_KEY_ID:?} ${AWS_SECRET_ACCESS_KEY:?} \
		${EC2_CERT:?} ${EC2_PRIVATE_KEY:?} \
		${locale:=en_US} ${charmap:=UTF-8} ${timezone:=UTC} \
		${imagedir:=/mnt/image} ${arch:=amd64}

# Check the architecture
[[ $arch != 'amd64' && $arch != 'i386' ]] && die "Unrecognized architecture: $arch"

# Quit if we can't find the certificate
[ ! -f "$EC2_CERT" ] && die "AWS certificate file not found:" "$EC2_CERT"
export EC2_CERT

# ... or the private for.
[ ! -f "$EC2_PRIVATE_KEY" ] && die "AWS private key file not found:" "$EC2_PRIVATE_KEY"
export EC2_PRIVATE_KEY

# Output some info to the user about the AMI we are about to build
log \
	"Building AMI for $distribution $codename" \
	"locale:            $locale" \
	"charmap:           $charmap" \
	"timezone:          $timezone" \
	"architecture:      $arch" \
	"packages:          ${packages[*]}" \
	"excluded packages: ${exclude_packages[*]}" \
	""

# Source all tasks in the right order
for task in `find $scriptdir/tasks -type f | sort`; do
	task_name=`echo $task | sed "s#$scriptdir/tasks/[0-9][0-9]-##"`
	log "Run task: $task_name"
	source $task
done
