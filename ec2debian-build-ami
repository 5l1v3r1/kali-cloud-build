#!/bin/bash -e
#            ^ Stop execution if any command fails


# Rember various paths
scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
originaldir=$(/bin/pwd)

function die {
	echo $@ >&2
	exit 1
}

packages="grub openssh-server curl less"

while [ $# -gt 0 ]; do
	case $1 in
		--arch)        arch=$2;                             shift 2 ;;
		--description) description=$2;                      shift 2 ;;
		--user)        AWS_USER_ID=$2;                      shift 2 ;;
		--access-key)  AWS_ACCESS_KEY_ID=$2;                shift 2 ;;
		--secret-key)  AWS_SECRET_ACCESS_KEY=$2;            shift 2 ;;
		--private-key) EC2_PRIVATE_KEY=$2;                  shift 2 ;;
		--cert)        EC2_CERT=$2;                         shift 2 ;;
		--timezone)    timezone=$2;                         shift 2 ;;
		--locale)      locale=$2;                           shift 2 ;;
		--charmap)     charmap=$2;                          shift 2 ;;
		--no-run-user-data) no_run_user_data=1;             shift   ;;
		--package)     packages="$packages $2";             shift 2 ;;
		--imagedir)    imagedir=$2;                         shift 2 ;;
		--script)      scripts=("${scripts[@]}" "$2");      shift 2 ;;
		--debug)       set -x;                              shift   ;;
		*)             die "$0: Unrecognized option: $1";           ;;
	esac
done

distribution="debian"
codename="squeeze"

# Required and default parameters
true ${AWS_USER_ID:?} ${AWS_ACCESS_KEY_ID:?} ${AWS_SECRET_ACCESS_KEY:?} \
		${EC2_CERT:?} ${EC2_PRIVATE_KEY:?} \
		${locale:=en_US} ${charmap:=UTF-8} ${timezone:=UTC} \
		${imagedir:=/mnt/image} ${arch:=amd64}

case $arch in
	amd64) bundlearch="x86_64" ;;
	i386)  bundlearch="i386"   ;;
	*)     die "$0: Unrecognized architecture: $arch"
esac

[ ! -f "$EC2_CERT" ] && die "$0: AWS certificate file not found: $EC2_CERT"
export EC2_CERT

[ ! -f "$EC2_PRIVATE_KEY" ] && die "$0: AWS private key file not found: $EC2_PRIVATE_KEY"
export EC2_PRIVATE_KEY

packages="$packages udev psmisc lsb-release"

echo "Building AMI for $distribution $codename"
echo "locale:         $locale"
echo "charmap:        $charmap"
echo "timezone:       $timezone"
echo "architecture:   $arch"
echo "packages:       $packages"

# The good stuff starts here.
source $scriptdir/tasks/00-host-dependencies

source $scriptdir/tasks/01-host-information

source $scriptdir/tasks/10-create-volume

# Don't launch daemons on apt-get install
mkdir -p $imagedir/usr/sbin/
cat << EOF > $imagedir/usr/sbin/policy-rc.d
#!/bin/sh
exit 101
EOF
chmod 755 $imagedir/usr/sbin/policy-rc.d

# Bootstrap
debootstrap --arch $arch $codename $imagedir $bootstrap_mirror

mount --bind /dev $imagedir/dev
chroot $imagedir mount -t proc none /proc
chroot $imagedir mount -t sysfs none /sys
chroot $imagedir mount -t devpts none /dev/pts

chroot $imagedir apt-get -f install -y

source $scriptdir/tasks/20-locales

source $scriptdir/tasks/21-apt-sources

source $scriptdir/tasks/25-packages

source $scriptdir/tasks/30-kernel

source $scriptdir/tasks/35-grub

source $scriptdir/tasks/38-security

source $scriptdir/tasks/40-networking

source $scriptdir/tasks/50-startup-scripts

source $scriptdir/tasks/60-external-scripts

source $scriptdir/tasks/70-cleanup

mkdir -p $imagedir/var/lib/apt/lists/partial

set +e
umount -l $imagedir/proc
umount -l $imagedir/sys
umount -l $imagedir/dev/pts
chroot $imagedir umount /proc
chroot $imagedir umount /sys
chroot $imagedir umount /dev/pts
umount $imagedir/dev
set -e

source $scriptdir/tasks/80-ebs-upload
