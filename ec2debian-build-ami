#!/bin/bash
#
# ec2debian-build-ami
#
# This script builds, bundles, and uploads an Debian AMI for
# Amazon EC2.
#
# This has currently only been tested on standard ubuntu EC2 instances, but
# should run fine on most systems with minimal fine tuning.
#
# This script is a fork of ec2ubuntu-build-ami available here:
# http://ec2ubuntu.googlecode.com/svn/trunk/bin/ec2ubuntu-build-ami
#
# Command line options:
#
#   --ebs                 - Build an EBS boot AMI (defaults to S3 based AMI)
#   --user ID             - Defaults to $AWS_USER_ID
#   --access-key ID       - Defaults to $AWS_ACCESS_KEY_ID
#   --secret-key ID       - Defaults to $AWS_SECRET_ACCESS_KEY_ID
#   --private-key PATH    - Defaults to $EC2_PRIVATE_KEY
#   --cert PATH           - Defaults to $EC2_CERT
#   --distribution NAME   - debian
#   --codename NAME       - squeeze
#   --release VERSION     - 6.0
#   --arch ARCHITECTURE   - i386 amd64 (defaults to arch of the running host)
#   --bootstrap-mirror    - Defaults to http://ftp.us.debian.org/debian/
#   --timezone ZONE       - Defaults to UTC
#   --locale LOCALE       - Defaults to en_US
#   --charmap CHARMAP     - Defaults to UTF-8
#   --no-run-user-data    - Do not run user-data script on first boot
#   --package NAME        - Additional Ubuntu package to install
#   --script FILE         - External script/command to run before bundle
#   --modules "URL1 URL2" - Kernel modules to download and install
#   --builddir DIR        - Build directory [default: /mnt/build]
#   --location US/EU      - AWS location [default: US]
#   --region REGION       - AWS region [default: us-east-1]
#   --upload2all-regions  - Upload in all regions, use ec2-migrate-manifest
#   --no-build-chroot     - Upload in all regions, use ec2-migrate-manifest
#   --description         - The description of the AMI
#   --ec2-ami-tools-version VER - EC2 AMI tools version (e.g., "1.3.xxxxxx")
#
#   The following options are only for S3-based AMIS (not using --ebs):
#
#   --bucket NAME         - S3 bucket name for non-EBS AMIs
#   --prefix PREFIX       - Defaults to a reasonable manifest name
#   --tag TAGNAME         - Used in the default prefix value
#   --size MB             - Root partition size in megabytes (default 10240)
#   --bundle-opts OPTIONS - Options to pass to ec2-bundle-vol
#
#   It is ok to specify multiple --package and --script options.
#   It is ok to specify a quoted command for the --script option.
#   You can also use "--desktop yes" to install the desktop packages
#   without the NX software.
#
# Example:
#
#   Build an Ubuntu 8.04 Hardy base install AMI and upload to MYBUCKET:
#
#   bash ec2ubuntu-build-ami             \
#   --codename    hardy                  \
#   --bucket      MYBUCKET               \
#   --user        $AWS_USER_ID           \
#   --access-key  $AWS_ACCESS_KEY_ID     \
#   --secret-key  $AWS_SECRET_ACCESS_KEY \
#   --private-key pk*.pem                \
#   --cert        cert*.pem 
#
#   Build a Debian/Squeeze server AMI and upload to all regions
#
#   bash ec2ubuntu-build-ami             \
#   --codename    hardy                  \
#   --bucket      MYBUCKET               \
#   --user        $AWS_USER_ID           \
#   --access-key  $AWS_ACCESS_KEY_ID     \
#   --secret-key  $AWS_SECRET_ACCESS_KEY \
#   --private-key pk*.pem                \
#   --cert        cert*.pem              \
#   --upload2all-regions
# 
# Amazon EC2 AMIs built using this script:
#
#   http://alestic.com
#
# Updated versions of this script:
#
#   http://code.google.com/p/ec2ubuntu/
#
# General Ubuntu on EC2 support (including support for this script):
#
#   http://groups.google.com/group/ec2ubuntu
#

#
# FORMAT: region;location;aki
#
# Use the official AKIs pv-grub-hd0-V1.01 provided by Amazon for all regions
#

regions_aki_i386=(
 "us-east-1;US;aki-407d9529"
 "us-west-1;us-west-1;aki-99a0f1dc"
 "eu-west-1;EU;aki-4deec439"
 "ap-southeast-1;ap-southeast-1;aki-13d5aa41"
 "ap-northeast-1;ap-northeast-1;aki-d209a2d3"
)

regions_aki_x86_64=( 
 "us-east-1;US;aki-427d952b"
 "us-west-1;us-west-1;aki-9ba0f1de"
 "eu-west-1;EU;aki-4feec43b"
 "ap-southeast-1;ap-southeast-1;aki-11d5aa43"
 "ap-northeast-1;ap-northeast-1;aki-d409a2d5"
)

originaldir=$(/bin/pwd)

packages="openssh-server curl less"

while [ $# -gt 0 ]; do
  case $1 in
    --distribution) distribution=$2;                    shift 2 ;;
    --codename)    codename=$2;                         shift 2 ;;
    --release)     release=$2;                          shift 2 ;;
    --arch)        bsarch=$2;                           shift 2 ;;
    --tag)         tag=$2;                              shift 2 ;;
    --bucket)      bucket=$2;                           shift 2 ;;
    --prefix)      prefix=$2;                           shift 2 ;;
    --user)        AWS_USER_ID=$2;                      shift 2 ;;
    --access-key)  AWS_ACCESS_KEY_ID=$2;                shift 2 ;;
    --secret-key)  AWS_SECRET_ACCESS_KEY=$2;            shift 2 ;;
    --private-key) EC2_PRIVATE_KEY=$2;                  shift 2 ;;
    --cert)        EC2_CERT=$2;                         shift 2 ;;
    --bootstrap-mirror) bootstrap_mirror=$2;            shift 2 ;;
    --timezone)    timezone=$2;                         shift 2 ;;
    --locale)      locale=$2;                           shift 2 ;;
    --charmap)     charmap=$2;                          shift 2 ;;
    --size)        size=$2;                             shift 2 ;;
    --no-run-user-data) no_run_user_data=1;             shift ;;
    --script)      scripts=("${scripts[@]}" "$2");      shift 2 ;;
    --package)     packages="$packages $2";             shift 2 ;;
    --modules)     modules=$2;                          shift 2 ;;
    --builddir)    builddir=$2;                         shift 2 ;;
    --bundle-opts) bundle_vol_options=$2;               shift 2 ;;
    --location)    location=$2;                         shift 2 ;;
    --region)      region=$2;                           shift 2 ;;
    --upload2all-regions) upload2all_regions=1;		shift ;;
    --no-build-chroot) no_build_chroot=1;		shift ;;
    --description) description=$2;                      shift 2 ;;
    --ec2-ami-tools-version) tools_version=$2;          shift 2 ;;
    --ebs)         ebs=1;                               shift ;;
    *)             echo "$0: Unrecognized option: $1" >&2; exit 1;
  esac
done

if [ $(uname -m) = 'x86_64' ]; then
  true ${bsarch:="amd64"}
  bundlearch="x86_64"
  regions_aki=${regions_aki_x86_64[@]}
  export notlongext="64"
else
  true ${bsarch:="i386"}
  bundlearch="i386"
  regions_aki=${regions_aki_i386[@]}
  export notlongext=""
fi

if [ "$codename" = "" -a "$release" = "" ]; then
  codename=squeeze
fi

if [ "$release" = "" ]; then
  case $codename in
    squeeze)  release=6.0      ;;
    *)        echo "$0: Unrecognized codename: $codename" >&2; exit 1;
  esac
elif [ "$codename" = "" ]; then
  case $release in
    6.0)  codename=squeeze   ;;
    *)     echo "$0: Unrecognized release: $release" >&2; exit 1;
  esac
fi

if [ "$distribution" = "" ]; then
  case $codename in
    squeeze)              distribution=debian ;;
    *)     echo "$0: Unrecognized codename: $codename" >&2; exit 1;
  esac
fi

# Required and default parameters
true ${AWS_USER_ID:?} ${AWS_ACCESS_KEY_ID:?} ${AWS_SECRET_ACCESS_KEY:?} \
     ${EC2_CERT:=$(echo /mnt/cert-*.pem)} \
     ${EC2_PRIVATE_KEY:=$(echo /mnt/pk-*.pem)} \
     ${bootstrap_mirror:=http://ftp.us.debian.org/debian/} \
     ${locale:=en_US} ${charmap:=UTF-8} ${timezone:=UTC} \
     ${location:=US} ${region:=us-east-1} \
     ${tools_version:=1.3-45758} \
     ${builddir:=/mnt/build}
#FIXME: tools_version ??

if [ ! -f $EC2_CERT ]; then
  echo "$0: AWS certificate file not found: $EC2_CERT" >&2; exit 1;
fi
if [ ! -f $EC2_PRIVATE_KEY ]; then
  echo "$0: AWS private key file not found: $EC2_PRIVATE_KEY" >&2; exit 1;
fi

if [ -z "$ebs" ]; then

  # We must be given a bucket and we set a default prefix if we're not
  # building an EBS snapshot AMI.
  true ${bucket:?} \
       ${tag:=custom} \
       ${prefix:=$distribution-$release-$codename-$bsarch-$tag-$(date +%Y%m%d)}

  true ${size:=10240}

else

  # It would be more compact to test all of these using eval in a loop, but
  # then it's not so easy to give a meaningful error message showing what
  # command line option shouldn't have been given.
  if [ -n "$bucket" ]; then
      echo >&2 "$0: --ebs is incompatible with --bucket"
      exit 1
  fi
  if [ -n "$tag" ]; then
      echo >&2 "$0: --ebs is incompatible with --tag"
      exit 1
  fi
  if [ -n "$size" ]; then
      echo >&2 "$0: --ebs is incompatible with --size"
      exit 1
  fi
  if [ -n "$prefix" ]; then
      echo >&2 "$0: --ebs is incompatible with --prefix"
      exit 1
  fi
  if [ -n "$bundle_vol_options" ]; then
      echo >&2 "$0: --ebs is incompatible with --bundle-opts"
      exit 1
  fi
fi

packages="$packages udev psmisc lsb-release"
                             
echo "Building AMI for $distribution $release $codename"
echo "locale:       $locale"
echo "charmap:      $charmap"
echo "location:     $location"
echo "region:       $region"
echo "timezone:     $timezone"
if [ -z "$ebs" ]
then
  echo "image size:   ${size} MB"
  echo "uploading to: $bucket/$prefix"
fi
echo "bundlearch:   $bundlearch"
echo "bsarch:       $bsarch"

set -e
set -x

# The good stuff starts here.

if [ -z "$ebs" ]
then
  mkdir -p $builddir
  cd $builddir
  imagedir=$builddir/$distribution
  mkdir -p $imagedir
else
  if [ ! -d "$builddir" ]
  then
    echo >&2 "Build directory '$builddir' is nonexistent."
    echo >&2 "It should be a mounted EBS volume."
  fi
  imagedir=$builddir
fi


# Install packages on the builing system to make the rest of this script run smoothly.
# FIXME: this JRE package is probably specific to ubuntu. 
apt-get install -y bzip2 binutils unzip debootstrap rsync ruby openssl curl ca-certificates libopenssl-ruby openjdk-6-jre-headless

export JAVA_HOME=/usr/lib/jvm/java-6-openjdk/

# To build kernel modules yourself, see:
# http://alestic.com/2008/05/kernel-modules-2-6-21

if [ ! "$kernel" -a ! "$modules" ]; then
  if [ $bsarch = 'amd64' ]; then
    modules=http://camptocamp.s3.amazonaws.com/ec2boot/ec2-boot-bundle-x86_64-20110322.tar.bz2
  elif [ $bsarch = 'i386' ]; then
    modules=http://camptocamp.s3.amazonaws.com/ec2boot/ec2-boot-bundle-i386-20110322.tar.bz2
    packages="$packages libc6-xen"
  else
    echo >&2 "$0: Unrecognized --arch $bsarch"
    exit 1
  fi
fi
echo "modules:      $modules"
echo "packages:     $packages"

# Don't launch daemons on apt-get install
mkdir -p $imagedir/usr/sbin/
cat << EOF > $imagedir/usr/sbin/policy-rc.d
#!/bin/sh
exit 101
EOF
chmod 755 $imagedir/usr/sbin/policy-rc.d

# Install AMI and API tools
if [ ! -d /mnt/tools ]; then
  mkdir /mnt/tools
  curl -s -o /mnt/tools/ec2-ami-tools.zip https://camptocamp.s3.amazonaws.com/ec2-ami-tools.zip
  curl -s -o /mnt/tools/ec2-api-tools.zip http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip
  unzip /mnt/tools/ec2-ami-tools.zip -d /mnt/tools/
  unzip /mnt/tools/ec2-api-tools.zip -d /mnt/tools/
  ln -s /mnt/tools/ec2-ami-tools-* /mnt/tools/ec2-ami-tools
  ln -s /mnt/tools/ec2-api-tools-* /mnt/tools/ec2-api-tools
fi
export EC2_HOME=/mnt/tools/ec2-api-tools
export EC2_AMITOOL_HOME=/mnt/tools/ec2-ami-tools
export EC2_APITOOL_HOME=/mnt/tools/ec2-api-tools
export PATH=$PATH:${EC2_AMITOOL_HOME}/bin:${EC2_APITOOL_HOME}/bin

if [ ! $no_build_chroot ]; then

# Bootstrap Ubuntu
debootstrap --arch $bsarch $codename $imagedir $bootstrap_mirror

chroot $imagedir mount -t proc none /proc
chroot $imagedir mkdir -p /dev/pts
chroot $imagedir mount -t devpts none /dev/pts

chroot $imagedir apt-get -f install -y

# Set locale
chroot $imagedir apt-get install -y --force-yes locales # for Debian
chroot $imagedir localedef -c --inputfile=$locale --charmap=$charmap $locale.$charmap
echo "LANG=\"$locale.$charmap\""  >$imagedir/etc/default/locale

# Set timezone
echo $timezone >$imagedir/etc/timezone
/bin/cp -f $imagedir/usr/share/zoneinfo/$timezone $imagedir/etc/localtime

# Basic sources.list
mv $imagedir/etc/apt/sources.list $imagedir/etc/apt/sources.list.orig || true
cat <<EOF >$imagedir/etc/apt/sources.list
deb http://http.us.debian.org/debian   $codename         main contrib non-free
#deb http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
deb http://security.debian.org         $codename/updates main contrib non-free
EOF
chroot $imagedir apt-get update

# MAKEDEV is expected in /dev by some packages.
ln -s /sbin/MAKEDEV $imagedir/dev/MAKEDEV

# Upgrade/install packages
chroot $imagedir apt-get -y upgrade
export DEBIAN_FRONTEND=noninteractive
chroot $imagedir apt-get install -y $packages
unset DEBIAN_FRONTEND

# Install PvGrub
mkdir -p $imagedir/boot/grub
curl -s -o $imagedir/tmp/grub-legacy-ec2.deb http://ch.archive.ubuntu.com/ubuntu/pool/main/c/cloud-init/grub-legacy-ec2_0.5.10-0ubuntu1.5_all.deb
export DEBIAN_FRONTEND=noninteractive
chroot $imagedir apt-get install ucf
chroot $imagedir dpkg -i /tmp/grub-legacy-ec2.deb
unset DEBIAN_FRONTEND
chroot $imagedir /usr/sbin/update-grub-legacy-ec2

# Install kernel, kernel modules and grub configuration
for module in $modules; do
  curl -s $module | tar xjC $imagedir
done
sed -i 's!root=LABEL=uec-rootfs!root=/dev/sda1!' $imagedir/boot/grub/menu.lst

# This kernel module has historically been loaded; keeping the tradition.
echo "xfs" >> $imagedir/etc/modules

chown -R root.root $imagedir/lib/modules
for module_version in $(cd $imagedir/lib/modules; ls); do
  chroot $imagedir depmod -a $module_version
done

# Xen expects a single tty1
/bin/rm -f $imagedir/etc/event.d/tty[2-6]

# Security
chroot $imagedir shadowconfig on
chroot $imagedir passwd -d root
perl -pi.orig -e 's/#PasswordAuthentication yes/PasswordAuthentication no/' \
  $imagedir/etc/ssh/sshd_config

# Basic networking
cat <<'EOF' >$imagedir/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF

cat <<'EOF' >$imagedir/etc/hosts
127.0.0.1 localhost.localdomain localhost

# The following lines are desirable for IPv6 capable hosts
::1 ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF

cat <<'EOF' >>$imagedir/etc/ssh/sshd_config
UseDNS no
EOF

/bin/rm -f $imagedir/etc/hostname

chroot $imagedir apt-get -y remove --purge isc-dhcp-client isc-dhcp-common
chroot $imagedir apt-get -y install dhcpcd

# Download and install startup scripts.
scripts_url=https://github.com/camptocamp/ec2debian-build-ami/raw/master/init.d
install_init(){
  script=$1
  curl -sL -o $imagedir/etc/init.d/$script $scripts_url/$script
  chmod 755  $imagedir/etc/init.d/$script
  chroot $imagedir insserv -d $script
}

install_init ec2-mkdir-tmp
install_init ec2-ssh-host-key-gen
install_init ec2-get-credentials
if [ ! $no_run_user_data ]; then
  install_init ec2-run-user-data
fi

# Inside Xen, CMOS clock is irrelevant, so save seconds at boot
/bin/rm -f $imagedir/etc/rc?.d/*hwclock*

# Export build parameters so they are available in external scripts
export regions_aki distribution description release codename timezone locale charmap size \
  scripts packages modules desktop builddir imagedir bundlearch \
  AWS_USER_ID AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY EC2_PRIVATE_KEY EC2_CERT

if [ -z "$ebs" ]
then
  export tag bucket prefix
fi

# Invoke external scripts/commands if requested
export DEBIAN_FRONTEND=noninteractive
for script in "${scripts[@]}"; do
  cd "$originaldir"
  status=
  if [ -x "$script" ]; then
    "$script"
    status=$?
  elif [ -f "$script" ]; then
    /bin/bash "$script"
    status=$?
  else
    eval $script
  fi

  if [ -n "$status" -a "$status" -ne 0 ]; then
    echo "Execution of '$script' failed with status $status" >&2
    exit $status
  fi
done
unset DEBIAN_FRONTEND
cd $builddir

chroot $imagedir apt-get clean
rm -rf $imagedir/usr/sbin/policy-rc.d         \
       $imagedir/var/log/{bootstrap,dpkg}.log \
       $imagedir/var/cache/apt/*.bin          \
       $imagedir/var/lib/apt/lists            \
       $imagedir/tmp/*                        \
       $imagedir/root/.bash_history
mkdir -p $imagedir/var/lib/apt/lists/partial

fi

if [ -z "$ebs" ]
then
  # Bundle & upload to S3
#  cp $EC2_PRIVATE_KEY $imagedir/tmp/pk.pem
#  cp $EC2_CERT        $imagedir/tmp/cert.pem

  # Special AKIs for PvGrub
  if [ $bsarch = 'amd64' ]; then
    aki="aki-4feec43b"
  elif [ $bsarch = 'i386' ]; then
    aki="aki-4deec439"
  fi

  ec2-bundle-vol                          \
    -v $imagedir                          \
    -r $bundlearch                        \
    --kernel $aki                         \
    -d /tmp                               \
    -p $prefix                            \
    -u $AWS_USER_ID                       \
    -k $EC2_PRIVATE_KEY                   \
    -c $EC2_CERT                          \
    -s $size                              \
    -e /tmp                               \
    --generate-fstab                      \
    $bundle_vol_options

  if [ $upload2all_regions ]; then

    for i in ${regions_aki[@]}; do

      region=$(echo $i |cut -d ';' -f1)
      location=$(echo $i |cut -d ';' -f2)
      aki=$(echo $i |cut -d ';' -f3)

      ec2-migrate-manifest                \
        -m /tmp/$prefix.manifest.xml      \
        -a $AWS_ACCESS_KEY_ID             \
        -s $AWS_SECRET_ACCESS_KEY         \
        -c $EC2_CERT                      \
        -k $EC2_PRIVATE_KEY               \
        --region $region                  \
        --kernel $aki
      
      rm /tmp/$prefix.manifest.xml.bak
      
      ec2-upload-bundle                   \
        --batch                           \
        --retry                           \
        -b $bucket-$region                \
        -m /tmp/$prefix.manifest.xml      \
        -a $AWS_ACCESS_KEY_ID             \
        -s $AWS_SECRET_ACCESS_KEY         \
        --location $location
      
      ec2-register                        \
        -K $EC2_PRIVATE_KEY               \
        -C $EC2_CERT                      \
        --description "$description"      \
        --name "$bucket-$region/$prefix"  \
        --region $region                  \
        $bucket-$region/$prefix.manifest.xml

    done

  else

    ec2-upload-bundle                       \
      --retry                               \
      -b $bucket                            \
      -m /tmp/$prefix.manifest.xml          \
      -a $AWS_ACCESS_KEY_ID                 \
      -s $AWS_SECRET_ACCESS_KEY

    ec2-register                            \
      --description "$description"          \
      --name "$bucket/$prefix"              \
      --region $region                      \
      $bucket/$prefix.manifest.xml

  fi

else
  fstab=$builddir/etc/fstab
  mount_entry=`mount | grep $builddir`
  if [ -z "$mount_entry" ]
  then
    echo >&2 "Could not determine $builddir file system type for $fstab"
    echo >&2 "You'll need to manually create $fstab"
    exit 1
  fi

  type=`echo $mount_entry | cut -f5 -d' '`
  cat >$fstab <<EOF
/dev/sda1 /     $type    defaults 1 1
/dev/sda3 swap  swap    defaults 0 0
none      /proc proc    defaults 0 0
none      /sys  sysfs   defaults 0 0
EOF

  set +x
  cat <<EOF

You now need to:

 1. umount $builddir
 2. detach the EBS volume (ec2-detach-volume)
 3. create an EBS snapshot AMI (ec2-create-snapshot)
 4. (optional) delete the volume (ec2-delete-volume)
 5. register the snapshot as an AMI (ec2-register)

You can then use ec2-run-instances with your new AMI.

EOF

fi

umount -l $imagedir/dev/pts
umount -l $imagedir/proc || true
